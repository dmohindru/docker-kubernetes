Custom docker image work flow
------------------------------
1. We always start by writing Dockerfile
2. Dockerfile is passed on to Docker client (Docker CLI)
3. Docker client then pass on the command/Dockerfile to Docker Server
4. Docker server the creates an Usable docker image.

Creating a docker image (content of Dockerfile)
-----------------------------------------------
1. Specify a base image
2. Run some commands to install additional programs
3. Specify a command to run on container startup

Refer to folder ./redis-image to create custom image 
To create a docker image navigate to folder containing Dockerfile and issue following command
# docker build .


Analogy for a Dockerfile
------------------------
Writing a dockerfile == Being given a computer with no OS and being told to install Chrome
Some of the possible steps that need to be followed
1. Install an Operation system
2. Start up you default browser
3. Navigate to chrome.google.com
4. Download installer
5. Open file/folder explorer
6. Execute chrome_install.exe
7. Execute chrome.exe
Here above steps can be categorized as
Step 1: Specify a base image
Step 2-6: Run command to install additional programs
Step 7: Command to run on startup


Dockerfile Teardown
-------------------
Basic format of command in Dockerfile is of from

<some instruction to docker server> <argument to instruction>
e.g.
FROM alpine 
This command instructs Docker server to pull an image called alpine from some cloud source like Docker hub
RUN apk add --update redis
This command instructs Docker server to install redis server in previously pull image alpine
CMD ["redis-server"]
This command instructs Docker server to run this command when a container is created from this image

Sequence of steps Docker server when building an image
-------------------------------------------------------
Lets say this a our Dockerfile
FROM alpine
RUN apk add --update redis
CMD ["redis-server"]

Step 1 [FROM alpine]: 
1.1: When docker server sees this command it first check its local cache if this image is present. If not then it pull this image from docker hub

Step 2 [RUN apk add --update redis]: 
2.1: Docker now check its previous step and find that an image is downloaded. So it spin up a temporary container so that a change can be made in its file system snapshot. 
2.2: It then executes apk command to install redis server in containers file system.
2.3: It then terminated this container and create a temporary image that can be used in any subsequent step. 

Step 3 [CMD ["redis-server"]]
3.1: Docker server now spins up an temporary container created from temporary image in step 2.3 and specify command that need to be executed when a container is created from an image file.
3.2: It update the temporary image file created in step 2.3 which in this case file will be a final image.

Essentially docker server works on temporary images created in previous steps updated it in current steps and create a temporary image to be used in any subsequent steps. 

Rebuilding from cached containers
---------------------------------
Docker server always caches the intermediate result while building any image from Dockerfile. As an instance say we have a modification in our Dockerfile as below

FROM alpine
RUN apk add --update redis
RUN apk add --update gcc
CMD ["redis-server"]

If we build a docker image from this Dockerfile. Docker will reuse intermediate images from previous build for 
Step 1: FROM alpine
Step 2: RUN apk add --update redis

However if the order of RUN command in Dockerfile were swapped like below
FROM alpine
RUN apk add --update gcc
RUN apk add --update redis
CMD ["redis-server"]

In this build Docker server will only reuse intermediate images from following steps
Step1: FROM alpine

CRUX: Order of commands matter in Dockerfile will have affect on efficiency of docker build process.

Tag an image during docker build
--------------------------------
# docker build -t <you docker id>/<image name>:<version> .
eg.
# docker build -t dmohindru/redis:latest .
Note: tag format in above command is just a convention everybody uses

Docker commit command
---------------------
Disclaimer: You would not be required to use commit command that often. The process below shows how to create and image from a running container.

General steps are
1. Spin up a container from any existing image.
2. Install any dependencies as required.
3. Use docker ps command to get an id of running container
4. Use docker commit command to specify a process/command that this container should execute on its startup.

Step1:
# docker run -it alpine sh
Step2: execute this command inside a running container
# apk add --update redis
Step3: execute this command from a different terminal
# docker ps
Step4: execute this command from a different terminal
# docker commit -c 'CMD ["redis-server"]' <id of container>
Above command will generate an image with an id

Now we can run this newly generated image with normal docker run command as
# docker run <id of new image>


