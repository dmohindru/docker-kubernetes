Path to production deployment for kubernetes multi container application
------------------------------------------------------------------------
1. Create config files for each service and deployment
2. Test locally on minikube/kubernetes local instance
3. Create a Github/Travis flow to build images and deployment
4. Deploy app to a cloud provider

Volume in generic container terminology
----------------------------------------
Some type of mechanism that allows a container to access a filesystem outside itself

Volume in Kubernetes
--------------------
An object that allows a container to store data at the pod level

Types of Volume objects in Kubernetes
-------------------------------------
1. Persistent Volume Claim: We want these. This is essentially we ask kubernetes we want this much storage (volumes) for our pod configurations. And kubernetes then provide us with either statically provisioned persistent volume or dynamically provisioned persistent volume (explained below)
  1.1 Statically provisioned Persistent Volume: These are the kind of volumes that kubernetes has provisioned ahead of time. And if volume request matches these sizes its provided to a pod. 
  1.2 Dynamically provisioned Persistent Volume: These are the kind of volumes that are provisioned on a demand basis. And provided back to requesting pod.

2. Persistent Volume: We want these. Here we are creating some long term storage system which is not linked to a container or a pod. Very suitable scheme for pods running database containers where we need long term storage.

3. Volume: We don't want this for data tat need to last. Basically volume is tied to a pod, so if containers are restarted in a pod then new containers will have access to old data worked on by previous container. However if a pod crashes we also loose data stored in a volume. This behavior make volume not suitable for pods running database containers where we need long term storage solutions.

Persistent Volume Claim Access Modes
------------------------------------
1. ReadWriteOnce: Can be used by a single node.
2. ReadOnlyMany: Multiple nodes can read from this.
3. ReadWriteMany: Can be read and written to by many nodes.

Imperative commands to create a Secret object
---------------------------------------------
