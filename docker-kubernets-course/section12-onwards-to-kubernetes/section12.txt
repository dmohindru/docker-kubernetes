What is Kubernetes?
-------------------
System for running many different containers over multiple different machines.

Why use Kubernetes?
-------------------
When you need to run many different containers with different images.

Working with Kubernetes in Development vs Production
-----------------------------------------------------
Development
- minikube

Production
- Managed solutions
  - Amazon Elastic Container Service for Kubernetes (EKS)
  - Google Cloud Kubernetes Engine (GKE)
- Do it yourself

Components of minikube
----------------------
- minikube: Use to managing the VM itself
- kubectl: Use for managing containers in the node

Local Kubernetes Development workflow
-------------------------------------
1. Install Kubectl: CLI for interacting with our master.
2. Install a VM driver virtualbox: Used to make a VM that will be your single node.
3. Install minikube: Runs a single node on that VM.

Mapping knowledge of Docker Compose and Kubernetes
---------------------------------------------------
Docker Compose
  1. Each entry can optionally get docker-compose to build an image.
  2. Each entry represents a container we want to create.
  3. Each entry defines the networking requirements (ports).
Kubernetes
  1. Kubernetes expects all images to already be built. Make sure our image is hosted on docker hub.
  2. One config file per 'Object' we want to create. Make one config file to create the container.
  3. We have to manually set up all networking. Make one config file to set up networking.

Components of config files
--------------------------

=> apiVersion
Each API version defines a different set of 'objects' we can use
- apiVersion: v1
  - componentStatus
  - configMap
  - Endpoints
  - Event
  - Namespace
  - Pod
- apiVersion: apps/v1
  - ControllerRevision
  - StatefulSet


=> kind(object)
Object can be of type (not exhaustive)
1. StatefulSet

2. ReplicaController

3. Pod: This object is used to create a container. Runs one or more closely related containers. In Kubernetes world we cannot create a container by itself. So Pod is the smallest deployable unit in Kubernetes. And Pod is essentially a group of containers with similar purpose. Eg.
Lets assume we have a Pod with three containers
  - postgres (Primary container): A regular postgres RDBMS system.
  - logger (support container): A container that supports database logging activity.
  - backup-manager (support container): A container that supports data backup service for postgres container.

4. Service: This object is used to setup a networking in Kubernetes Cluster. Basically it acts as a communication layer between outside with and pods in Node (VM created by Minikube).
 Type of service objects
  - ClusterIP: Exposes a set of pods to only other objects in the cluster
  - NodePort: Exposes a container to the outside world (only good for dev purposes!!!)
  - LoadBalancer
  - Ingress

5. Deployment: Maintains a set of identical pods, ensuring that they have the correct config and that the right number exists.


kubectl commands
----------------
Feed a config file to kubectl
# kubectl apply -f <filename>
e.g
# kubectl apply -f client-pod.yml
# kubectl apply -f client-node-port.yml

Feed a group of config files to kubectl
# kubectl apply -f <directory_to_config_files>

Print the status of all running pods
# kubectl get pods

Watch a log for any pod
# kubectl logs <id_of_pod>

Print the status of all running deployments
# kubectl get deployments

Print the status of all running service objects
# kubectl get services

Apply changes to running system
# kubectl apply -f <update_yml_file>

Get detailed info about an object
# kubectl describe <object type> <object name>
e.g.
# kubectl describe pod client-pod

Remove an object
# kubectl delete -f <config_file>
config_file is the file that created this object

Delete a deployment
# kubectl delete deployment <deployment_name>

Delete a service
# kubectl delete service <service_name>

Imperative command to update image
# kubectl set image <object_type>/<object_name> <container_name>=<new image to use>
e.g.
# kubectl set image deployment/client-deployment client=dmohindru/multi-client:v5
Deployment flow
---------------
1. Deployment File: List of pods and services that need to be deployed onto Kubernetes cluster.
2. Master: From deployment file master gets its set of responsibility to take care of like making sure certain number of containers are always running. It constantly polls all the node about the status of container they are running.
3. Node (A computer): 
  3.1. Its the node which runs actual containers
  3.2. It receives command from master what it need to do with lifecycle of a container.
  3.3. Each node as its own copy of Docker program running.
  3.4. Each node uses its Docker program to pull images from docker hub and maintains its local cache of docker images.
  3.5. Each node uses its Docker program to maintain a lifecycle of a docker container.
  3.6. Each node responds to requests made by master about the status of containers it is running.

Refer to diagram kubernetes-compete-deployment-flow.png for visual illustration of above explanation. 

Important Takeaways
-------------------
1. Kubernetes is a system to deploy containerized apps.
2. Nodes are individual machines (or VM's) that run containers.
3. Masters are machines (or VM's) with a set of programs to manage nodes.
4. Kubernetes didn't build our images - it got them from somewhere else.
5. Kubernetes (the master) decided where to run each container - each node can run a dissimilar set of containers.
Important stuff
6. To deploy something, we update the desired state of the master with a config file.
7. The master works constantly to meet your desired state. 

Type of deployments
-------------------
1. Imperative Deployment: Do exactly these steps to arrive at this container setup.
2. Declarative Deployment: Our container setup should look like this, make it happen.

Example of Imperative approach
------------------------------
1. Create 3 containers using the multi-worker image.
2. Make another 2 containers with multi-worker.
3. Delete 1 container running multi-worker.
4. Those X number of containers should be networked to multi-redis.
5. Those X number of containers should be updated to use multi-redis v1.23

Example of Declarative approach
-------------------------------
1. There should be 3 containers using multi-worker.
2. There should be 5 containers using multi-worker.
3. There should be 4 containers using multi-worker.
4. There should be 4 containers using multi-worker networked to multi-redis.
5. There should be 4 containers using multi-worker using V.123 networked to multi-redis.

Important
---------
Kubernetes has command for both DECLARATIVE and IMPERATIVE approach.

In this course and mostly in production environment we will be using DECLARATIVE approach.
