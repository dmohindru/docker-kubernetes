What is Kubernetes?
-------------------
System for running many different containers over multiple different machines.

Why use Kubernetes?
-------------------
When you need to run many different containers with different images.

Working with Kubernetes in Development vs Production
-----------------------------------------------------
Development
- minikube

Production
- Managed solutions
  - Amazon Elastic Container Service for Kubernetes (EKS)
  - Google Cloud Kubernetes Engine (GKE)
- Do it yourself

Components of minikube
----------------------
- minikube: Use to managing the VM itself
- kubectl: Use for managing containers in the node

Local Kubernetes Development workflow
-------------------------------------
1. Install Kubectl: CLI for interacting with our master.
2. Install a VM driver virtualbox: Used to make a VM that will be your single node.
3. Install minikube: Runs a single node on that VM.

Mapping knowledge of Docker Compose and Kubernetes
---------------------------------------------------
Docker Compose
  1. Each entry can optionally get docker-compose to build an image.
  2. Each entry represents a container we want to create.
  3. Each entry defines the networking requirements (ports).
Kubernetes
  1. Kubernetes expects all images to already be built. Make sure our image is hosted on docker hub.
  2. One config file per 'Object' we want to create. Make one config file to create the container.
  3. We have to manually set up all networking. Make one config file to set up networking.

Components of config files
--------------------------

=> apiVersion
Each API version defines a different set of 'objects' we can use
- apiVersion: v1
  - componentStatus
  - configMap
  - Endpoints
  - Event
  - Namespace
  - Pod
- apiVersion: apps/v1
  - ControllerRevision
  - StatefulSet


=> kind(object)
Object can be of type (not exhaustive)
1. StatefulSet

2. ReplicaController

3. Pod: This object is used to create a container. In Kubernetes world we cannot create a container by itself. So Pod is the smallest deployable unit in Kubernetes. And Pod is essentially a group of containers with similar purpose. Eg.
Lets assume we have a Pod with three containers
  - postgres (Primary container): A regular postgres RDBMS system.
  - logger (support container): A container that supports database logging activity.
  - backup-manager (support container): A container that supports data backup service for postgres container.

4. Service: This object is used to setup a networking in Kubernetes Cluster. Basically it acts as a communication layer between outside with and pods in Node (VM created by Minikube).
 Type of service objects
  - ClusterIP
  - NodePort: Exposes a container to the outside world (only good for dev purposes!!!)
  - LoadBalancer
  - Ingress




