----------------------------------------------------------------------------------------------------------------------------
BASIC COMMANDS
----------------------------------------------------------------------------------------------------------------------------
Tutorial link: https://www.youtube.com/watch?v=fqMOX6JJhGo
Labs link: https://kodekloud.com/p/docker-labs

----------------------------------------------------------------------------------------------------------------------------
BASIC COMMANDS
----------------------------------------------------------------------------------------------------------------------------

Runs a docker container from a docker image_name file. If image not found it pull the image from docker hub 
# docker run image_name

Run docker in a detached mode
# docker run -d image_name

Run docker image and give it a name
# docker run --name container_name image_name

Attach a background running container to active console session.
# docker attach container_name_or_id
remember you can provide only few characters for container id so that it is different from other containers.

List all running containers
# docker ps

List all running or previously existed container
# docker ps -a

Stop a container. Provide either container id or container name
# docker stop name_or_id

Remove a running container
# docker rm container_name

List images on docker host
# docker images

Remove docker images
# docker rmi image_name

Only pull an image and not run it
# docker pull image_name

Execute a command on running container
# docker exec container_name command
# docker exec funny_name cat /etc/hosts

----------------------------------------------------------------------------------------------------------------------------
RUN COMMAND
----------------------------------------------------------------------------------------------------------------------------
Run a latest version of docker_image_name
# docker run docker_image_name

Run a particular version of docker_image_name
# docker run docker_image_name:version-number

Note: version-number here is also called tag. If not tag is provided then default tag resolves to latest which is latest version of specified docker_image_name

Run a docker image in interactive mode
# docker run -i docker_image_name

Run a docker image in interactive mode and attach terminal
# docker run -it docker_image_name

Run a docker image and map its internal port of docker host to external port to be accessible to outside world
# docker run -p external_port:internal_port docker_image_name

Map a directory/file inside a docker container to a directory/file in a docker host
# docker run -v file_or_directory_in_docker_host:file_or_directory_in_docker_container docker_image_name

Inspect various details about the containers
# docker inspect docker_container_name

View docker container logs
# docker logs docker_container_name

----------------------------------------------------------------------------------------------------------------------------
ENVIRONMENT VARIABLES
----------------------------------------------------------------------------------------------------------------------------

Run a docker container with setting a environment variable
# docker run -e ENV_VAR_NAME=ENV_VAR_VALUE docker_image_name

To find a environment variable on a docker container user following command inspect Env section of json displayed
# docker inspect docker_container_name

----------------------------------------------------------------------------------------------------------------------------
DOCKER IMAGES
----------------------------------------------------------------------------------------------------------------------------
General Steps to make a docker image for a python application
1. OS - Ubuntu
2. Update apt repo
3. Install dependencies using apt
4. Install Python dependencies using pip
5. Copy source code to /opt folder
6. Run the web server using flask command

Step to create docker images
1. Create a docker file all the command there are need to run an app which you would have to do manually without docker framework.

2. Run following command to build a docker image
# docker build -t dhruv/my-custom-app
Above command create a docker image locally

3. To make a locally create docker image to public you need to push this docker image to docker hub. Do it with below command
# docker push dhruv/my-custom-app

See history of command used to build a docker image 
# docker history docker_image_name

----------------------------------------------------------------------------------------------------------------------------
DOCKER CMD VS ENTRYPOINT
----------------------------------------------------------------------------------------------------------------------------
Normally docker images like ubuntu will execute and terminate immediately if image does not have any process/command associated with it. To specify a defult command with a docker image add a CMD docker command in Dockerfile.

To run a command when a docker image is launched
CMD["command"]

various format for CMD command
CMD command param1
CMD["command", "param1"]
both CMD format are equivalent
e.g.
CMD sleep 5
CMD["sleep", "5"]

To append a command name while launch a docker image
ENTRYPOINT["sleep"]

so if above code in present in Dockerfile of ubuntu image then it translates to following run command as below
# docker run ubuntu-sleeper sleep specify_num_of_sec_on_command_line

In above command if you don't specify number of seconds then it will cause an error. To specify default value use below code in your Dockerfile
ENTRYPOINT["sleep"]
CMD["5"]

Specify an entry point during docker run command
# docker run -entrypoint sleep2.0 ubuntu-sleeper 10
above command translates to 
# docker run  ubuntu-sleeper sleep2.0 10

----------------------------------------------------------------------------------------------------------------------------
DOCKER NETWORKING
----------------------------------------------------------------------------------------------------------------------------
Docker has following network
1. Bridge: Default network given to all containers. All container has ip in range of 172.17.0.2 172.17.0.xx. This means each instance of docker container of same docker image will have different ip address and hence can run on same port.

2. None: Docker container runs in an isolated network

3. Host: Docker container is attached to host network. So to access this container no need to map port to host network using -p command line option. But the downside is that each different docker container of same docker image has to run on different port as all would share a same ip address. 

To specify a network use --network command line options
# docker run Ubuntu --network=none // connect to isolated network
# docker run Ubuntu --network=host // connect to host network
# docker run Ubuntu // connect to default bridge network

By default docker will create a single bridge in docker host and all web containers can communicate with each other. But a user can create as many network bridges in docker host as they want. Following command can do this
# docker network create --driver bridge --subnet 182.18.0.0/16 --gateway 182.18.0.0 custom-isolated-network

To view all network in docker host
# docker network ls

To inspect network attached to docker container
# docker inspect docker_container_name
This print a json file. Look for details under Network/bridge. It will have details for Gateway, IP Address, Mac Address.

Docker has an embedded DNS which maps docker container name to internal ip address assigned by docker host.

View details of docker network
#docker network inspect network_name 

----------------------------------------------------------------------------------------------------------------------------
DOCKER STORAGE
----------------------------------------------------------------------------------------------------------------------------
All docker related file are stored in /var/lib/docker

There are two types of mounting
1. Volume mounting: mounts volume from /var/lib/docker/volume directory
2. Bind mounting: mounts any location on docker host

Create a volume in docker
# docker volume create data_volume
This create a folder in directory /var/lib/docker/volumes

Attach a volume to docker container (Volume mounting)
# docker run -v volume_name:docker_container_internal_volume docker_image_name
If volume name is not create by previous docker volume create command docker will create a new one for us.

We can also attach an internal volume to any other folder on docker host and not its created volumes in /var/lib/docker/volumes folder (Bind mounting)
# docker run -v path_to_external_storage:docker_container_internal_volume docker_image_name

Above -v option can also be specified by --mount option which is more verbose and more preferred by
# docker run --mount type=bind,source=/data/mysql,target=/var/lib/mysql mysql
here type specifies mount type bind or volume
source is location on docker host where data is persisted
target is location in a docker container

docker storage driver are responsible to managing all the storage on external source. Some of storage drivers
1. AUFS
2. ZFS
3. BTRFS
4. DEVICE MAPPER
5. OVERLAY
6. OVERLAY2

Docker will select best possible driver according to operating will select. Different driver will have different performance you may select driver as per application needs.

----------------------------------------------------------------------------------------------------------------------------
DOCKER COMPOSE
----------------------------------------------------------------------------------------------------------------------------
docker compose is used when we need to run multiple docker container. Then can be done using specifying all docker containers in yml file.
Basic structure of docker-compose.yml file

----docker-compose.yml----
services:
	web:
		image: "mmumshad/simple-webapp"
	database:
		image: "mongodb"
	messaging:
		image: "redis:alpine"
	orchestration:
		image: "ansible"
 	

Run a docker compose with following command
# docker-compose up

Sample application structure used to in Docker compose and further topics
Sample voting application
Its components
1. voting-app: Written in python. It connects to in memory database which uses redis
2. In memory database: Uses redis. It connect to worker app
3. Worker app: It process data after reading from In memory database. This component is written in .NET. It stores data in db which uses PostgreSQL engine
4. DB: It uses PostgreSQL database engine. This db is being read by result-app.
5. result-app: This component reads data from DB component as displays output. This component is written in Node.js

If container wish to communicate with each other we need to specify command line option as --link container_name:host_name. E.g
# docker run -d --name=vote -p 5000:80 --link redis:redis votingd-app

This command will create an entry in /etc/host file for dns purpose

Below describes all the docker commands to run a complete application
# docker run -d --name=redis redis
# docker run -d --name=db postgres:9.4
# docker run -d --name=vote -p 5000:80 --link redis:redis voting-app
# docker run -d --name=result -p 5001:80 --link db:db result-app
# docker run -d --name=worker --link db:db --link redis:redis worker

However using --link command line option is deprecated. Instead use of docker compose is recommended. Following will be contents of Docker-compose file based on above commands.

redis:
	image: redis

db:
	image: postgres:9.4

vote:
	image: voting-app
	ports:
	 - 5000:80
	links:
	 - redis

result:
	image: result-app
	ports:
	 - 5001:80
	links:
	 - db

worker: 
	image: worker
	links:
	 - redis
	 - db

We can now bring up the whole stack with 
# docker-compose up

In above docker compose code if an image file is not found on docker registery. Then we can build docker image from local source by specifying local folder where source code is and its corresponding Dockerfile to specify how to build docker image file.

redis:
	image: redis

db:
	image: postgres:9.4

vote:
	build: ./vote
	ports:
	 - 5000:80
	links:
	 - redis

result:
	build: ./result
	ports:
	 - 5001:80
	links:
	 - db

worker: 
	build: ./worker
	links:
	 - redis
	 - db
	 
Docker compose file format has three version (1, 2, 3). Each new version are build on eliminating limitation of previous version. Read about various version else where again.
 
----------------------------------------------------------------------------------------------------------------------------
DOCKER REGISTRY
----------------------------------------------------------------------------------------------------------------------------
docker images are saved in central repository as user_name/docker_image_name

example of public registry
docker.io // default docker registry
gcr.io	// google registry

login into docker private registry
# docker login private-registry.io

pull images from private registry
# docker run private-registry.io/apps/internal-app

To deploy to private registry
First run private registry app
# docker run -d -p 5000:5000 --name registry registry:2

Build a docker image for private registry
# docker image tag my-image localhost:5000/my-image

Push a docker image to private registry
# docker push localhost:5000/my-image

Pull image from local registry
#docker pull localhost:5000/my-image
or
#docker pull 192.168.52.98:5000/my-image

----------------------------------------------------------------------------------------------------------------------------
DOCKER ENGINE
----------------------------------------------------------------------------------------------------------------------------
Docker engine is basically a host with docker installed.
When we install docker we basically install below components
1. Docker CLI: Docker command line interface. This interface uses Rest API server to communicate with docker deamon. 
2. Rest API server: responsible for communication between docker objects and docker cli and docker deamon
3. Docker Deamon: responsible for all docker objects like images, volumes, networks etc

Note: Docker CLI can sit on different machine and Rest API and Docker Deamon together on another machine. To specify a different docker engine on command line use following command line options
# docker -H=remote-docker-engine:2375 run nginx

By default docker container has no restriction on how much cpu it can use. We can restrict a docker container on how much cpu it can use by using --cpus command line option.
# docker run --cpus=.5 ubuntu // restricts that this container cannot use more than 50% of cpu resources.

Limit container to user max 100MB of memory
# docker run --memory=100m ubuntu 

Note: Docker containers share the underlying OS. So docker image for linux with not work on windows and vice versa

----------------------------------------------------------------------------------------------------------------------------
DOCKER CONTAINER ORCHESTRATION
----------------------------------------------------------------------------------------------------------------------------
Docker orchestration is tools and commands with help to deploy, monitor, destroy and redeploy hundred and thousands to docker container

# docker service create --replacs=100 nodejs

This technique typically involved running multiple docker host and deploys many many docker containers in it.

Available Docker Container Orchestration Solutions

1. docker Swarm
2. kubernets
3. mesos



